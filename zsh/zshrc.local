#PATH="/usr/lib/ccache/bin:$PATH:$HOME/.local/bin"
PATH="$PATH:$HOME/.local/bin"
PATH="$PATH:/usr/share/clang/" # Add run-clang-tidy.py and all to PATH
ulimit -c 0 # disable core dumps, but allow enabling them on demand with ulimit -c unlimited

export GCC_COLORS="auto" # for GCC to color diagnostic messages in conjuntion with ccache

# Color in man pages
export LESS_TERMCAP_md=$'\e[01;31m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[01;32m'

# For crontab -e
export EDITOR=nvim
alias vim='nvim'

alias l='ls -lAh'
alias o='exo-open'
alias watch='watch -n 0.3'
alias gdb='gdb -q'
alias ninja='nice ninja'
#alias dev='bash -c '"'"'(trap "test build/compile_commands.json -nt compile_commands.json && compdb -p build list > compile_commands.json" EXIT; nice ninja -C build $@)'"'"' ninja'
alias dev='nice ninja -C build'
alias cargo='nice cargo'
alias diff='git diff --no-index'
alias dis='git diff --no-index --ignore-all-space'

dtt() {
	if [ -z "$1" ] || [[ "$1" =~ ^- ]]; then
		meson test -C build "${@}"
	else
		ninja -C build build.ninja --quiet && # rebuild if necessary and print errors
		meson test -C build --list | (fzf --filter "$1" || echo 'No matching tests' >&2) | sed 's@ / @:@' | xargs --no-run-if-empty meson test -C build "${@:2}"
	fi
}

dt() {
	if [ -z "$1" ]; then
		dtt --print-errorlogs
	else
		dtt "$1" --print-errorlogs "${@:2}"
	fi
}

dts() {
	dt "$1" -v --wrapper='strace -ffyyY -s 1000'
}

alias obosim='cd ~/src/obosim/'
alias simlib='cd subprojects/simlib/'

git-rename() {
	git grep -lz -P "$1" | xargs -0 sed -i "s@$1@$2@g"
}

# Warn about dotfiles change
# git -C "$HOME" update-index --refresh > /dev/null || false
# git -C "$HOME" diff-index --quiet HEAD -- || /bin/echo -e '\033[33mdotfiles changed, for backup purposes review, commit and push the changes\033[m'
# [ "$(git -C "$HOME" rev-parse origin/main)" = "$(git -C "$HOME" rev-parse HEAD)" ] || /bin/echo -e '\033[33mdotfiles changes are not pushed\033[m'

function backup() (
	function do_backup() (
		set -euo pipefail
		test -e "$1" || { echo "path does not exist: $1" >&2; return 1; }
		# chdir to the parent folder of the specified path
		cd -P -- "$(dirname -- "$1")"
		# Check if specified path is a file or a directory
		local fname=$(basename -- "$1")
		if [ -f "${fname}" ]; then
			local out_file="$HOME/backup/$(echo "${PWD#$HOME/}/${fname}" | sed 's@/@,@g').tar.zst"
			(
				function rm_tmp() { rm -rf "${out_file}.tmp" }
				trap rm_tmp INT TERM;
				tar --create --zst --file "${out_file}.tmp" "${fname}" &&
				mv "${out_file}.tmp" "${out_file}"
			)
		else
			# chdir to the directory
			cd -P -- "${fname}"
			local out_file="$HOME/backup/$(echo "${PWD#$HOME/}" | sed 's@/@,@g').tar.zst"

			function list_git_files() {
				git ls-files -z --cached --recurse-submodules
				git ls-files -z --others --exclude-standard
				PROJECT_DIR=$PWD git submodule foreach --quiet 'git ls-files -z --others --exclude-standard | while read -d "" x; do echo -n "${PWD#$PROJECT_DIR/}/$x"; echo -ne "\0"; done'
				echo -ne '.git\0'
			}
			function ls_all_files() {
				ls --zero --almost-all
			}
			function filter_existing_files() {
				while read -d '' x; do
					if [ -e "${x}" ]; then
						printf '%s\0' "${x}"
					fi
				done
			}

			if [ -d '.git/' ]; then
				list_git_files
			else
				ls_all_files
			fi | filter_existing_files |
				(
					function rm_tmp() { rm -rf "${out_file}.tmp" }
					trap rm_tmp INT TERM;
					xargs --null tar --create --zst --file "${out_file}.tmp" &&
					mv "${out_file}.tmp" "${out_file}"
				)
		fi
		du -sh "${out_file}"
	)

	rc=0
	if [ -z "$1" ]; then
		do_backup . || rc=1
	else
		for x in "$@"; do
			do_backup "$x" || rc=1
		done
	fi
	return $rc
)

alias bp="backup"

function transcode_opus {
	local in_file="$1"
	local out_file="$2"
	if [ -z "${out_file}" ]; then
		out_file="${in_file%.*}.opus"
	fi
	echo -e "Transcoding \033[1m${in_file}\033[m into \033[1m${out_file}\033[m"
	nice ffmpeg -i "${in_file}" -c:a libopus -map_metadata 0 "${out_file}"
	#sox "${in_file}" -t wav - | opusenc - "${out_file}"
}
function transcode_opus_all {
	for x in "$@"; do
		transcode_opus "${x}"
	done
}

function transcode_av1 {
	local in_file="$1"
	local out_file="$2"
	if [ -z "${out_file}" ]; then
		out_file="${in_file%.*}.mkv"
	fi
	echo -e "Transcoding \033[1m${in_file}\033[m into \033[1m${out_file}\033[m"
	nice ffmpeg -i "${in_file}" -c:v libsvtav1 -c:a libopus -map_metadata 0 "${out_file}"
}
function transcode_av1_all {
	for x in "$@"; do
		transcode_av1 "${x}"
	done
}

function transcode_avif {
	local in_file="$1"
	local out_file="$2"
	if [ -z "${out_file}" ]; then
		out_file="${in_file%.*}.avif"
	fi
	echo -e "Transcoding \033[1m${in_file}\033[m into \033[1m${out_file}\033[m"
	if [[ "${in_file}" == *.png ]] || [[ "${in_file}" == *.jpg ]] || [[ "${in_file}" == *.jpeg ]]; then
		nice avifenc -j all "${in_file}" "${out_file}"
	else
		(
			tmp_file=$(mktemp --suffix=.jpg) &&
			trap "rm '${tmp_file}'" EXIT &&
			nice convert "${in_file}" -quality 100 "${tmp_file}" &&
			nice avifenc -j all "${tmp_file}" "${out_file}"
		)
	fi
}
function transcode_avif_all {
	for x in "$@"; do
		transcode_avif "${x}"
	done
}

alias speedtest='speedtest --secure'
alias connect='${HOME}/.local/bin/connect-to-wifi.sh'

function setup_github_remotes {
	git remote set-url origin "https://github.com/varqox/$1.git"
	git remote set-url --push origin "git@github.com:varqox/$1.git"
}

function przepis {
	fd '\.(md|html)$' "$HOME/src/przepisy-kulinarne/" | grep -Pv '/README.md' | fzf --exit-0 --print0 | read -r -d '' x && if [[ "$x" == *.html ]]; then firefox --new-window "$x"; else bat "$x"; fi
}

function diff_installed_file() (
	set -euo pipefail
	file="$1"
	pkg=$(pacman -Q --owns --quiet "${file}")
	pkg_version=$(pacman -Qi "${pkg}" | grep '^Version' | sed 's/^Version[^:]*: //')
	pkg_arch=$(pacman -Qi "${pkg}" | grep '^Architecture' | sed 's/^Architecture[^:]*: //')
	/bin/diff <(tar -axf "/var/cache/pacman/pkg/${pkg}-${pkg_version}-${pkg_arch}.pkg.tar.zst" -O "${file#/}") "${file}"
)
